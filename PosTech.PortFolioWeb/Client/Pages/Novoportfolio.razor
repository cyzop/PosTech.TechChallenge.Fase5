@page "/novoportfolio"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using PosTech.PortFolioWeb.Shared
@using System.ComponentModel.DataAnnotations
@using PosTech.PortFolioWeb.Shared
@using PosTech.PortFolioWeb.Client.Services

@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UsuarioService UsuarioService
@inject IJSRuntime JSRuntime;

<h3>Novo Portfólio</h3>

<EditForm Model="entidade" OnValidSubmit="CreateEntidade">
    <div class="form-group mb-3">
        <label for="entidadeName" >Nome</label>
        <InputText @bind-Value="entidade.Nome" MaxLength="150" class="form-control" id="entidadeName" />
    </div>
    <div class="form-group mb-3">
        <label for="entidadeDescricao">Descrição</label>
        <InputText @bind-Value="entidade.Descricao" MaxLength="150" class="form-control" id="entidadeDescricao" />
    </div>

    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <button class="btn btn-success" type="submit">Salvar</button>
    <button class="btn btn-secondary" @onclick="Voltar">Cancelar</button>

</EditForm>

@code {
    private PortFolioDao entidade { get; set; } = new();

    private void Voltar()
    {
        NavigationManager.NavigateTo("/portfolios");
    }

    async Task CreateEntidade()
    {
        entidade.Id = Guid.NewGuid().ToString();
        entidade.DataCriacao = DateTime.Now;
        entidade.ClienteId = UsuarioService.Id;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Confirma incluir o novo portfólio ?");
        if (confirmed is false)
            return;

        var response = await Http.PutAsJsonAsync("portfolio", entidade);
        if (response.IsSuccessStatusCode)
            Voltar();
        else
            JSRuntime.InvokeAsync<bool>("alert", $"Falha na operação {response.StatusCode}");
    }
}
